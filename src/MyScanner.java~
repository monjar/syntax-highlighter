/* The following code was generated by JFlex 1.7.0 */



/* Symbol class that function returns */
class Symbol{
    private String value;
    private TokenType tp;
    Symbol(TokenType tp){
        this.tp = tp;
    }
    Symbol(TokenType tp , String value){
        this.tp = tp;
        this.value = value;
    }
    public String getValue(){
        return this.value;
    }
    public TokenType getType(){
        return this.tp;
    }
    public void setValue(String value){
        this.value = value;
    }


}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Scanner.flex</tt>
 */
public class MyScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRINGSTATE = 2;
  public static final int CHARSTATE = 4;
  public static final int COMMENTSTATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\56\1\60\1\60\1\10\22\0\1\2\1\0\1\12"+
    "\1\54\3\0\1\13\2\0\1\11\1\22\1\0\1\22\1\23\1\7"+
    "\1\14\11\5\2\0\1\1\1\0\1\3\2\0\4\16\1\21\1\20"+
    "\5\4\1\15\6\4\1\55\4\4\1\17\2\4\1\0\1\61\2\0"+
    "\1\6\1\0\1\24\1\31\1\40\1\30\1\33\1\41\1\43\1\42"+
    "\1\34\1\4\1\44\1\32\1\47\1\35\1\27\1\51\1\4\1\37"+
    "\1\36\1\26\1\25\1\46\1\45\1\53\1\50\1\52\12\0\1\60"+
    "\u1fa2\0\1\60\1\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\4\1\1\22\3\1\1\1\3\1\7\1\10\1\11"+
    "\1\12\1\13\1\11\2\0\2\14\1\15\1\0\1\16"+
    "\1\4\1\0\1\17\1\14\1\20\1\0\1\4\4\3"+
    "\1\21\7\3\1\22\1\23\23\3\1\0\1\3\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\7\13"+
    "\1\34\1\17\1\0\1\17\16\3\1\35\1\36\20\3"+
    "\1\37\7\3\1\0\1\3\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\3\3\1\50\3\3\1\51"+
    "\1\3\1\52\1\53\1\54\14\3\1\55\2\3\1\56"+
    "\3\3\1\57\2\3\1\60\1\61\1\3\1\0\1\3"+
    "\1\62\1\63\4\3\1\64\5\3\1\65\1\66\6\3"+
    "\1\67\1\70\1\3\1\71\1\72\2\3\1\0\3\3"+
    "\1\73\1\3\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\3\1\104\4\3\1\105\1\0\1\106"+
    "\1\3\1\107\1\110\4\3\1\111\1\0\1\112\1\113"+
    "\1\114\1\115\1\116\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\310\0\u012c"+
    "\0\u015e\0\u0190\0\310\0\310\0\u01c2\0\u01f4\0\u0226\0\u0258"+
    "\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\u05dc\0\310\0\310\0\310\0\310\0\310\0\u060e"+
    "\0\u0640\0\u0672\0\310\0\u06a4\0\310\0\372\0\372\0\u06d6"+
    "\0\u0708\0\u073a\0\u076c\0\310\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u012c\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2"+
    "\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42"+
    "\0\u0e74\0\310\0\310\0\310\0\310\0\310\0\310\0\310"+
    "\0\310\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2"+
    "\0\310\0\u1004\0\u1036\0\310\0\u1068\0\u109a\0\u10cc\0\u10fe"+
    "\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c\0\u128e"+
    "\0\u12c0\0\u12f2\0\u012c\0\u012c\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a"+
    "\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u012c\0\u1644\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\310\0\310"+
    "\0\310\0\310\0\310\0\310\0\310\0\u012c\0\u1806\0\u1838"+
    "\0\u186a\0\u012c\0\u189c\0\u18ce\0\u1900\0\u012c\0\u1932\0\u012c"+
    "\0\u012c\0\u012c\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e"+
    "\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u012c\0\u1bbc"+
    "\0\u1bee\0\u012c\0\u1c20\0\u1c52\0\u1c84\0\u012c\0\u1cb6\0\u1ce8"+
    "\0\u012c\0\u012c\0\u1d1a\0\u1d4c\0\u1d7e\0\u012c\0\u012c\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1e46\0\u012c\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e"+
    "\0\u1f40\0\u012c\0\u012c\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a"+
    "\0\u206c\0\u012c\0\u012c\0\u209e\0\u012c\0\u012c\0\u20d0\0\u2102"+
    "\0\u2134\0\u2166\0\u2198\0\u21ca\0\u012c\0\u21fc\0\u012c\0\u012c"+
    "\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u222e\0\u012c"+
    "\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u012c\0\u2328\0\u012c\0\u235a"+
    "\0\u012c\0\u012c\0\u238c\0\u23be\0\u23f0\0\u2422\0\u012c\0\u2454"+
    "\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\5\1\10\1\11\1\5\1\12"+
    "\1\0\1\5\1\13\1\14\1\15\5\10\1\5\1\16"+
    "\1\17\1\20\1\21\1\10\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\10\1\34"+
    "\1\10\1\35\1\36\1\37\1\10\1\40\2\10\1\41"+
    "\1\42\1\43\1\44\1\0\1\5\2\45\1\7\5\45"+
    "\1\0\1\45\1\46\43\45\1\47\1\44\1\0\1\50"+
    "\10\51\1\0\2\51\1\0\42\51\1\47\2\51\1\52"+
    "\2\53\1\7\5\53\1\0\1\54\44\53\1\55\1\44"+
    "\1\0\1\53\62\0\2\56\1\0\1\57\4\56\1\0"+
    "\45\56\1\0\3\56\4\0\3\10\5\0\6\10\2\0"+
    "\30\10\1\0\1\10\11\0\1\11\6\0\1\11\1\60"+
    "\3\0\1\61\1\0\1\62\7\0\1\61\35\0\1\63"+
    "\1\0\1\64\55\0\1\65\6\0\1\65\1\60\1\0"+
    "\1\66\1\0\1\61\1\0\1\62\7\0\1\61\17\0"+
    "\1\66\13\0\1\62\6\0\1\62\51\0\3\10\5\0"+
    "\6\10\2\0\1\10\1\67\26\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\11\10\1\70\16\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\13\10\1\71"+
    "\10\10\1\72\3\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\3\10\1\73\3\10\1\74\20\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\3\10\1\75"+
    "\7\10\1\76\14\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\3\10\1\77\24\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\6\10\1\100\2\10\1\101"+
    "\15\10\1\102\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\11\10\1\103\3\10\1\104\12\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\7\10\1\105\20\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\2\10"+
    "\1\106\5\10\1\107\3\10\1\110\1\10\1\111\2\10"+
    "\1\112\6\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\7\10\1\113\20\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\1\114\2\10\1\115\12\10\1\116"+
    "\11\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\1\117\1\120\1\10\1\121\2\10\1\122\21\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\3\10\1\123"+
    "\24\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\16\10\1\124\11\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\3\10\1\125\24\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\1\126\27\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\13\10\1\127\14\10"+
    "\1\0\1\10\40\0\1\130\31\0\3\10\5\0\6\10"+
    "\2\0\2\10\1\131\25\10\1\0\1\10\4\0\10\47"+
    "\1\0\1\47\1\132\1\133\12\47\1\134\2\47\1\135"+
    "\3\47\1\136\1\47\1\137\1\47\1\140\14\47\1\0"+
    "\1\47\1\0\1\47\13\0\1\141\46\0\10\47\1\0"+
    "\1\47\1\142\1\143\12\47\1\144\2\47\1\145\3\47"+
    "\1\146\1\47\1\147\1\47\1\150\14\47\1\0\1\47"+
    "\1\0\1\47\7\0\1\151\73\0\1\61\11\0\1\61"+
    "\33\0\1\152\6\0\1\152\5\0\1\153\44\0\1\62"+
    "\6\0\1\62\3\0\1\154\1\61\11\0\1\61\26\0"+
    "\10\63\1\0\45\63\1\0\3\63\5\0\1\65\6\0"+
    "\1\65\6\0\1\62\43\0\1\66\6\0\1\66\1\0"+
    "\1\66\1\0\2\66\2\0\1\66\3\0\2\66\1\0"+
    "\1\66\4\0\2\66\24\0\3\10\5\0\6\10\2\0"+
    "\2\10\1\155\25\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\2\10\1\156\5\10\1\157\1\10\1\160"+
    "\15\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\1\10\1\161\26\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\25\10\1\162\2\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\1\10\1\163\26\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\15\10\1\164"+
    "\12\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\3\10\1\165\24\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\7\10\1\166\20\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\11\10\1\167\16\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\12\10\1\170"+
    "\15\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\1\10\1\171\26\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\2\10\1\172\25\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\2\10\1\173\25\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\21\10\1\174"+
    "\6\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\1\175\12\10\1\176\14\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\17\10\1\177\6\10\1\200\1\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\1\201"+
    "\27\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\3\10\1\202\24\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\10\10\1\203\17\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\2\10\1\204\11\10\1\205"+
    "\2\10\1\206\5\10\1\207\2\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\12\10\1\210\15\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\11\10\1\211"+
    "\16\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\1\212\27\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\6\10\1\213\21\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\11\10\1\214\16\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\13\10\1\215\14\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\3\10"+
    "\1\216\24\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\2\10\1\217\25\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\10\10\1\220\17\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\6\10\1\221\1\10"+
    "\1\222\17\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\10\10\1\223\17\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\10\10\1\224\17\10\1\0\1\10"+
    "\41\0\1\225\30\0\3\10\5\0\6\10\2\0\13\10"+
    "\1\226\14\10\1\0\1\10\17\0\1\227\61\0\1\230"+
    "\61\0\1\231\61\0\1\232\61\0\1\233\61\0\1\234"+
    "\61\0\1\235\53\0\1\152\6\0\1\152\3\0\1\154"+
    "\46\0\1\152\6\0\1\152\51\0\3\10\5\0\6\10"+
    "\2\0\3\10\1\236\24\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\10\10\1\237\17\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\3\10\1\240\24\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\10\10"+
    "\1\241\17\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\7\10\1\242\20\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\7\10\1\243\20\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\5\10\1\244\22\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\1\245"+
    "\27\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\6\10\1\246\21\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\1\247\27\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\17\10\1\250\10\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\7\10\1\251\20\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\23\10"+
    "\1\252\4\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\7\10\1\253\20\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\2\10\1\254\25\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\1\10\1\255\26\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\11\10"+
    "\1\256\16\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\7\10\1\257\20\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\11\10\1\260\16\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\13\10\1\261\14\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\2\10"+
    "\1\262\25\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\1\10\1\263\26\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\3\10\1\264\24\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\10\10\1\265\17\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\7\10"+
    "\1\266\20\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\7\10\1\267\20\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\2\10\1\270\7\10\1\271\15\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\13\10"+
    "\1\272\14\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\12\10\1\273\15\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\14\10\1\274\13\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\1\275\27\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\3\10\1\276"+
    "\24\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\6\10\1\277\21\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\1\300\27\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\4\10\1\301\23\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\11\10\1\302\16\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\11\10"+
    "\1\303\16\10\1\0\1\10\44\0\1\304\25\0\3\10"+
    "\5\0\6\10\2\0\10\10\1\305\17\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\6\10\1\306\21\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\11\10"+
    "\1\307\16\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\17\10\1\310\10\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\4\10\1\311\23\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\6\10\1\312\21\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\1\10"+
    "\1\313\26\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\20\10\1\314\7\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\13\10\1\315\14\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\10\10\1\316\17\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\14\10"+
    "\1\317\13\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\7\10\1\320\20\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\3\10\1\321\24\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\15\10\1\322\12\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\2\10"+
    "\1\323\25\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\14\10\1\324\13\10\1\0\1\10\10\0\3\10"+
    "\5\0\6\10\2\0\13\10\1\325\14\10\1\0\1\10"+
    "\10\0\3\10\5\0\6\10\2\0\13\10\1\326\14\10"+
    "\1\0\1\10\10\0\3\10\5\0\6\10\2\0\12\10"+
    "\1\327\15\10\1\0\1\10\10\0\3\10\5\0\6\10"+
    "\2\0\1\330\27\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\10\10\1\331\17\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\2\10\1\332\25\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\7\10\1\333"+
    "\20\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\2\10\1\334\25\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\2\10\1\335\25\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\7\10\1\336\20\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\2\10\1\337"+
    "\25\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\2\10\1\340\25\10\1\0\1\10\36\0\1\341\33\0"+
    "\3\10\5\0\6\10\2\0\11\10\1\342\16\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\11\10\1\343"+
    "\16\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\7\10\1\344\20\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\7\10\1\345\20\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\6\10\1\346\21\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\11\10\1\347"+
    "\16\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\14\10\1\350\13\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\2\10\1\351\25\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\4\10\1\352\23\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\15\10\1\353"+
    "\12\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\16\10\1\354\11\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\11\10\1\355\16\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\4\10\1\356\23\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\2\10\1\357"+
    "\25\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\2\10\1\360\25\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\11\10\1\361\16\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\10\10\1\362\17\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\10\10\1\363"+
    "\17\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\6\10\1\364\6\10\1\365\12\10\1\0\1\10\31\0"+
    "\1\366\40\0\3\10\5\0\6\10\2\0\17\10\1\367"+
    "\10\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\7\10\1\370\20\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\15\10\1\371\12\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\2\10\1\372\25\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\7\10\1\373"+
    "\20\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\1\10\1\374\26\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\3\10\1\375\24\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\6\10\1\376\21\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\11\10\1\377"+
    "\16\10\1\0\1\10\34\0\1\u0100\35\0\3\10\5\0"+
    "\6\10\2\0\4\10\1\u0101\23\10\1\0\1\10\10\0"+
    "\3\10\5\0\6\10\2\0\13\10\1\u0102\14\10\1\0"+
    "\1\10\10\0\3\10\5\0\6\10\2\0\7\10\1\u0103"+
    "\20\10\1\0\1\10\10\0\3\10\5\0\6\10\2\0"+
    "\11\10\1\u0104\16\10\1\0\1\10\10\0\3\10\5\0"+
    "\6\10\2\0\7\10\1\u0105\20\10\1\0\1\10\37\0"+
    "\1\u0106\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\3\1\2\11\26\1\5\11"+
    "\1\1\2\0\1\11\1\1\1\11\1\0\2\1\1\0"+
    "\2\1\1\11\1\0\42\1\1\0\1\1\10\11\7\1"+
    "\1\11\1\1\1\0\1\11\50\1\1\0\1\1\7\11"+
    "\46\1\1\0\34\1\1\0\24\1\1\0\11\1\1\0"+
    "\5\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MyScanner(java.io.Reader in) {
      this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextInput() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return new Symbol(TokenType.EOFType , "EOF");
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(TokenType.OTHER , yytext());
            } 
            // fall through
          case 80: break;
          case 2: 
            { return new Symbol(TokenType.SPACE);
            } 
            // fall through
          case 81: break;
          case 3: 
            { return new Symbol(TokenType.ID , yytext());
            } 
            // fall through
          case 82: break;
          case 4: 
            { return new Symbol(TokenType.INTEGERNUMBER , yytext());
            } 
            // fall through
          case 83: break;
          case 5: 
            { yybegin(STRINGSTATE);
        return new Symbol(TokenType.LITSTRING , "\"");
            } 
            // fall through
          case 84: break;
          case 6: 
            { yybegin(CHARSTATE);
        return new Symbol(TokenType.LITCHAR, "\'");
            } 
            // fall through
          case 85: break;
          case 7: 
            { return new Symbol(TokenType.NEXTLINE);
            } 
            // fall through
          case 86: break;
          case 8: 
            { return new Symbol(TokenType.TAB);
            } 
            // fall through
          case 87: break;
          case 9: 
            { return new Symbol(TokenType.LITSTRING , yytext());
            } 
            // fall through
          case 88: break;
          case 10: 
            { yybegin(YYINITIAL); return new Symbol(TokenType.LITSTRING , "\"");
            } 
            // fall through
          case 89: break;
          case 11: 
            { throw new SyntaxErrorException(yyline, yycolumn);
            } 
            // fall through
          case 90: break;
          case 12: 
            { return new Symbol(TokenType.COMMENT , yytext());
            } 
            // fall through
          case 91: break;
          case 13: 
            { return new Symbol(TokenType.NEXTLINE ,"");
            } 
            // fall through
          case 92: break;
          case 14: 
            { return new Symbol(TokenType.LIBRARY , yytext());
            } 
            // fall through
          case 93: break;
          case 15: 
            { return new Symbol(TokenType.REALNUMBER , yytext());
            } 
            // fall through
          case 94: break;
          case 16: 
            { yybegin(COMMENTSTATE);
        return new Symbol(TokenType.COMMENT , "/*");
            } 
            // fall through
          case 95: break;
          case 17: 
            { return new Symbol(TokenType.KeyID, "do");
            } 
            // fall through
          case 96: break;
          case 18: 
            { return new Symbol(TokenType.KeyID, "in");
            } 
            // fall through
          case 97: break;
          case 19: 
            { return new Symbol(TokenType.KeyID, "if");
            } 
            // fall through
          case 98: break;
          case 20: 
            { return  new Symbol(TokenType.SPSTR , "\\\"");
            } 
            // fall through
          case 99: break;
          case 21: 
            { return  new Symbol(TokenType.SPSTR , "\\'");
            } 
            // fall through
          case 100: break;
          case 22: 
            { return  new Symbol(TokenType.SPSTR , "\\t");
            } 
            // fall through
          case 101: break;
          case 23: 
            { return  new Symbol(TokenType.SPSTR , "\\b");
            } 
            // fall through
          case 102: break;
          case 24: 
            { return  new Symbol(TokenType.SPSTR , "\\n");
            } 
            // fall through
          case 103: break;
          case 25: 
            { return  new Symbol(TokenType.SPSTR , "\\r");
            } 
            // fall through
          case 104: break;
          case 26: 
            { return  new Symbol(TokenType.SPSTR , "\\f");
            } 
            // fall through
          case 105: break;
          case 27: 
            { yybegin(YYINITIAL); return new Symbol(TokenType.LITCHAR , yytext());
            } 
            // fall through
          case 106: break;
          case 28: 
            { yybegin(YYINITIAL);  return  new Symbol(TokenType.COMMENT , "*/");
            } 
            // fall through
          case 107: break;
          case 29: 
            { return new Symbol(TokenType.KeyID, "int");
            } 
            // fall through
          case 108: break;
          case 30: 
            { return new Symbol(TokenType.KeyID, "new");
            } 
            // fall through
          case 109: break;
          case 31: 
            { return new Symbol(TokenType.KeyID, "for");
            } 
            // fall through
          case 110: break;
          case 32: 
            { yybegin(YYINITIAL);  return  new Symbol(TokenType.SPCHAR , "\\\"\'");
            } 
            // fall through
          case 111: break;
          case 33: 
            { yybegin(YYINITIAL);  return  new Symbol(TokenType.SPCHAR , "\\'\'");
            } 
            // fall through
          case 112: break;
          case 34: 
            { yybegin(YYINITIAL);  return  new Symbol(TokenType.SPCHAR , "\\t\'");
            } 
            // fall through
          case 113: break;
          case 35: 
            { yybegin(YYINITIAL);  return  new Symbol(TokenType.SPCHAR , "\\b\'");
            } 
            // fall through
          case 114: break;
          case 36: 
            { yybegin(YYINITIAL);  return  new Symbol(TokenType.SPCHAR , "\\n\'");
            } 
            // fall through
          case 115: break;
          case 37: 
            { yybegin(YYINITIAL);  return  new Symbol(TokenType.SPCHAR , "\\r\'");
            } 
            // fall through
          case 116: break;
          case 38: 
            { yybegin(YYINITIAL);  return  new Symbol(TokenType.SPCHAR , "\\f\'");
            } 
            // fall through
          case 117: break;
          case 39: 
            { return new Symbol(TokenType.KeyID, "auto");
            } 
            // fall through
          case 118: break;
          case 40: 
            { return new Symbol(TokenType.KeyID, "true");
            } 
            // fall through
          case 119: break;
          case 41: 
            { return new Symbol(TokenType.KeyID, "bool");
            } 
            // fall through
          case 120: break;
          case 42: 
            { return new Symbol(TokenType.KeyID, "long");
            } 
            // fall through
          case 121: break;
          case 43: 
            { return new Symbol(TokenType.KeyID, "else");
            } 
            // fall through
          case 122: break;
          case 44: 
            { return new Symbol(TokenType.KeyID, "enum");
            } 
            // fall through
          case 123: break;
          case 45: 
            { return new Symbol(TokenType.KeyID, "case");
            } 
            // fall through
          case 124: break;
          case 46: 
            { return new Symbol(TokenType.KeyID, "char");
            } 
            // fall through
          case 125: break;
          case 47: 
            { return new Symbol(TokenType.KeyID,"goto");
            } 
            // fall through
          case 126: break;
          case 48: 
            { return new Symbol(TokenType.KeyID, "void");
            } 
            // fall through
          case 127: break;
          case 49: 
            { return new Symbol(TokenType.KeyID, "main");
            } 
            // fall through
          case 128: break;
          case 50: 
            { return new Symbol(TokenType.KeyID,"until");
            } 
            // fall through
          case 129: break;
          case 51: 
            { return new Symbol(TokenType.KeyID, "union");
            } 
            // fall through
          case 130: break;
          case 52: 
            { return new Symbol(TokenType.KeyID, "break");
            } 
            // fall through
          case 131: break;
          case 53: 
            { return new Symbol(TokenType.KeyID, "scanf");
            } 
            // fall through
          case 132: break;
          case 54: 
            { return new Symbol(TokenType.KeyID, "short");
            } 
            // fall through
          case 133: break;
          case 55: 
            { return new Symbol(TokenType.KeyID, "const");
            } 
            // fall through
          case 134: break;
          case 56: 
            { return new Symbol(TokenType.KeyID, "false");
            } 
            // fall through
          case 135: break;
          case 57: 
            { return new Symbol(TokenType.KeyID, "float");
            } 
            // fall through
          case 136: break;
          case 58: 
            { return new Symbol(TokenType.KeyID, "while");
            } 
            // fall through
          case 137: break;
          case 59: 
            { return new Symbol(TokenType.KeyID, "double");
            } 
            // fall through
          case 138: break;
          case 60: 
            { return new Symbol(TokenType.KeyID, "extern");
            } 
            // fall through
          case 139: break;
          case 61: 
            { return new Symbol(TokenType.KeyID, "static");
            } 
            // fall through
          case 140: break;
          case 62: 
            { return new Symbol(TokenType.KeyID, "struct");
            } 
            // fall through
          case 141: break;
          case 63: 
            { return new Symbol(TokenType.KeyID, "signed");
            } 
            // fall through
          case 142: break;
          case 64: 
            { return new Symbol(TokenType.KeyID, "sizeof");
            } 
            // fall through
          case 143: break;
          case 65: 
            { return new Symbol(TokenType.KeyID, "switch");
            } 
            // fall through
          case 144: break;
          case 66: 
            { return new Symbol(TokenType.KeyID, "return");
            } 
            // fall through
          case 145: break;
          case 67: 
            { return new Symbol(TokenType.KeyID,"record");
            } 
            // fall through
          case 146: break;
          case 68: 
            { return new Symbol(TokenType.KeyID,"repeat");
            } 
            // fall through
          case 147: break;
          case 69: 
            { return new Symbol(TokenType.KeyID, "printf");
            } 
            // fall through
          case 148: break;
          case 70: 
            { return new Symbol(TokenType.KeyID, "String");
            } 
            // fall through
          case 149: break;
          case 71: 
            { return new Symbol(TokenType.KeyID, "typedef");
            } 
            // fall through
          case 150: break;
          case 72: 
            { return new Symbol(TokenType.KeyID, "default");
            } 
            // fall through
          case 151: break;
          case 73: 
            { return new Symbol(TokenType.KeyID,"println");
            } 
            // fall through
          case 152: break;
          case 74: 
            { return new Symbol(TokenType.KeyID, "unsigned");
            } 
            // fall through
          case 153: break;
          case 75: 
            { return new Symbol(TokenType.KeyID, "register");
            } 
            // fall through
          case 154: break;
          case 76: 
            { return new Symbol(TokenType.KeyID, "continue");
            } 
            // fall through
          case 155: break;
          case 77: 
            { return new Symbol(TokenType.KeyID,"function");
            } 
            // fall through
          case 156: break;
          case 78: 
            { return new Symbol(TokenType.KeyID, "volatile");
            } 
            // fall through
          case 157: break;
          case 79: 
            { return new Symbol(TokenType.KeyID, "#include");
            } 
            // fall through
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
